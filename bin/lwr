#!/usr/bin/env python

# live-wrapper - Wrapper for vmdebootstrap for creating live images
# (C) Iain R. Learmonth 2015 <irl@debian.org>
# See COPYING for terms of usage, modification and redistribution.
#
# bin/lwr - Live Wrapper (Application)

"""
This script is the main script for the live-wrapper application. It is
intended to be run from the command line.

See live-wrapper(8) for more information.
"""

import sys
import os
import cliapp
import logging
import pycurl
import tempfile
from tarfile import TarFile
from lwr.vm import VMDebootstrap
from lwr.isolinux import install_isolinux
from lwr.disk import install_disk_info
from lwr.grub import install_grub
from lwr.xorriso import Xorriso

__version__ = '0.4'

DI_HELPERS = 'http://ftp.debian.org/debian/dists/stretch/main/installer-amd64/current/images/cdrom/debian-cd_info.tar.gz' # pylint: disable=line-too-long

def fetch_di_helpers():
    logging.info("Downloading helper files from debian-installer team...")
    try:
        cdhelp = tempfile.mkdtemp()
        ditar = tempfile.mkstemp()
        with ditar[0] as info:
            curl = pycurl.Curl()
            curl.setopt(curl.URL, DI_HELPERS)
            curl.setopt(curl.WRITEDATA, info)
            curl.perform()
            curl.close()
        info = TarFile.open(ditar[1], 'r:gz')
        info.extractall(path=cdhelp)
        info.close()
        os.remove(ditar[1])
        return cdhelp
    except pycurl.error:
        logging.error("Failed to fetch the debian-installer helper files! Cannot continue!")
        sys.exit(1)

class LiveWrapper(cliapp.Application):

    # Instance variables
    cdroot = None # The path to the chroot the CD is being built in
    cdhelp = None # The path to the debian-installer team helpers

    def add_settings(self):
        self.settings.string(
            ['o', 'image_output'], 'Location for built image',
            metavar='/PATH/TO/FILE.ISO',
            default='live.iso', group='Base Settings')
        self.settings.string(
            ['d', 'distribution'], 'Debian release to use (default: %default)',
            metavar='NAME',
            default='stable', group='Base Settings')
        self.settings.string(
            ['m', 'mirror'], 'Mirror to use for image creation',
            metavar='MIRROR',
            group='Base Settings')
        self.settings.string(
            ['t', 'tasks'], 'Task packages to install',
            metavar='"task-TASK1 task-TASK2 ..."',
            group='Packages')
        self.settings.string(
            ['e', 'extra'], 'Extra packages to install',
            metavar='"PKG1 PKG2 ..."',
            group='Packages')
        self.settings.boolean(
            ['isolinux'], 'Add isolinux bootloader to the image '
            '(default: %default)', default=True, group="Bootloaders")
        self.settings.boolean(
            ['grub'], 'Add GRUB bootloader to the image (for EFI support) '
            '(default: %default)', default=True, group="Bootloaders")
        self.settings.boolean(
            ['grub-loopback-only'], 'Only install the loopback.cfg GRUB '
            'configuration (for loopback support) (overrides --grub) '
            '(default: %default)', default=False, group="Bootloaders")


    def process_args(self, args):
        if not self.settings['isolinux'] and not self.settings['grub']:
            cliapp.AppException("You must enable at least one bootloader!")
        if self.settings['grub'] and self.settings['grub-loopback-only']:
            self.settings['grub'] = False
        if os.geteuid() != 0:
            sys.exit("You need to have root privileges to run this script.")
        self.start_ops()

    def start_ops(self):
        """
        This function creates the live image using the settings determined by
        the arguments passed on the command line.

        .. note::
            This function is called by process_args() once all the arguments
            have been validated.
        """

        #Create work directory
        if not os.path.exists("cdroot"):
            os.mkdir("cdroot")
        else:
            cliapp.AppException("A cdroot directory already exists. Please "
                                "remove before building a fresh image.")

        #Make options available to customise hook in vmdebootstrap
        os.environ['LWR_TASK_PACKAGES'] = self.settings['tasks']
        os.environ['LWR_EXTRA_PACKAGES'] = self.settings['extra']
        if self.settings['mirror'] == "":
            os.environ['MIRROR'] = self.settings['mirror']

        #Run vmdebootstrap
        vm = VMDebootstrap(self.settings['distribution'],
                           self.settings['mirror'])
        vm.run()

        #Fetch D-I helper archive if needed
        if self.settings['grub']:
            self.cdhelp = fetch_di_helpers()

        #Install isolinux if selected
        if self.settings['isolinux']:
            install_isolinux('cdroot')

        #Install GRUB if selected
        if self.settings['grub'] or self.settings['grub-loopback-only']:
            install_grub('cdroot', self.cdhelp)

        #Install .disk information
        install_disk_info()

        #Create ISO image
        xorriso = Xorriso(self.settings['image_output'],
                          isolinux=self.settings['isolinux'],
                          grub=self.settings['grub'])
        xorriso.build_args()
        xorriso.build_image()

if __name__ == "__main__":
    LiveWrapper(version=__version__).run()
